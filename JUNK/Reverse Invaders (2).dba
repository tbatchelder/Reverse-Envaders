`Project: Reverse Invaders
`Created: 5/23/2009 9:30:56 AM

`Broad spectrum game variables
global gvictory         as byte     = 0           `Who was victorious? 0=nobody, 1=computer, 2=player
global gscore           as dword    = 0           `The players score

`Player specific globals
global genergyplayer    as dword    = 10000       `The initial starting energy of the player and his forces

`Computer specific globals
global genergycomp      as dword    = 1000000     `The initial starting energy of the computer player and its forces
global gnewguntime      as byte     = 0           `The percent of a new gun completed by the computer

`Image holder globals
global gimgbackground   as byte     = 1           `Image holder for the background
global gimgenergy       as byte     = 2           `Image holder for the computer energy
global gimgnewgun       as byte     = 3           `Image holder for the computer gun being built
global gimggun          as byte     = 4           `Image holder for the computer gun
global gimgrepairs      as byte     = 5           `Image holder for the computer repair crews
global gimgtroops       as byte     = 6           `Image holder for the computer ground troops
global gimgtank         as byte     = 7           `Image holder for the computer tanks
global gimgmissile      as byte     = 8           `Image holder for the computer missile tanks
global gimgcity         as byte     = 9           `Image holder for the computer city
global gimgshield       as byte     = 10          `Image holder for the computer shields
global gimgpassenger    as byte     = 11          `Image holder for the computer passenger plane
global gimgfighter      as byte     = 12          `Image holder for the computer fighter plane
global gimgalien        as byte     = 13          `Image holder for the player aliens
global gimgsuperalien   as byte     = 14          `Image holder for the player super aliens
global gimgmother       as byte     = 15          `Image holder for the player mothership
global gimgalienbeam    as byte     = 16          `Image holder for the player beam weapons
global gimgalienmiss    as byte     = 17          `Image holder for the player missiles
global gimgalienbomb    as byte     = 18          `Image holder for the player megabomb
global gimgplanebomb    as byte     = 19          `Image holder for the computer bomber bombs
global gimgplanemiss    as byte     = 20          `Image holder for the computer fighter missile
global gimggrdmiss      as byte     = 21          `Image holder for the computer ground missile
global gimggrdshell     as byte     = 22          `Image holder for the computer tank shells
global gimggrdbullet    as byte     = 23          `Image holder for the computer troopers bullets
global gimggunbeam      as byte     = 24          `Image holder for the computer beam weapon
global gimggunsbeam     as byte     = 25          `Image holder for the computer super beam weapoon
global gimgexplosion1   as byte     = 26          `Image holder for explosion type 1
global gimgexplosion2   as byte     = 27          `Image holder for explosion type 2
global gimgexplosion3   as byte     = 28          `Image holder for explosion type 3
global gimgexplosion4   as byte     = 29          `Image holder for explosion type 4

`The attributes for a sprite that will move
type generalmovingsprite
  spritenum as byte     `The number of the sprite
  imagenum as byte      `The image to use for the sprite
  x as integer          `The x position of the sprite
  y as integer          `The y position of the sprite
  z as byte             `The z position of the sprite
  alive as byte         `Is the sprite alive or dead
  damage as byte        `The damage level of the sprite
  maxdamage as byte     `The maximum amount of damage it can take
  score as byte         `The score obtained for killing the sprite
  velocity as integer   `The velocity of the sprite
  recharged as byte     `Is the sprite capable of firing again
  rechargerate as byte  `The rate at which the sprite recharges
endtype

`The additional attributes for a weapon sprite
type weaponsprite
  bullet as generalmovingsprite   `Give the weapon sprite the same attributes as the general sprites
  damage as byte                  `The damage amount the sprite does
endtype

`The attributes of a sprite that will not move
type staticsprite
  spritenum as byte   `The number of the sprite
  imagenum as byte    `The image to use for the sprite
  x as float          `The x position of the sprite
  y as float          `The y position of the sprite
  alive as byte       `Is the sprite alive or dead
  damage as byte      `The damage level of the sprite
  maxdamage as byte   `The maximum amount of damage it can take
endtype

`INITIALIZATION OF GAME#########################################################################################################################
sync on         `Initialize the display and control the framerate
sync rate 40    `Set the refesh rate
hide mouse      `Hide the mouse since we don't need it at all

`Load all game graphics
load image "layout.bmp", gimgbackground
load image "energybar.bmp", gimgenergy
load image "gunbuilder.bmp", gimgnewgun
load image "gun.bmp", gimggun
load image "repairer.bmp", gimgrepairs
load image "troopers.bmp", gimgtroops
load image "tank.bmp", gimgtank
load image "missiletank.bmp", gimgmissile
`load image "city.bmp",gimgcity
load image "shield.bmp", gimgshield
load image "passenger.bmp", gimgpassenger
load image "fighter.bmp", gimgfighter
load image "alien.bmp", gimgalien
load image "superalien.bmp", gimgsuperalien
load image "mother.bmp", gimgmother
load image "alienbeam.bmp", gimgalienbeam
load image "alienmiss.bmp", gimgalienmiss
load image "alienbomb.bmp", gimgalienbomb
load image "compbomb.bmp", gimgplanebomb
load image "compmiss.bmp", gimgplanemiss
load image "compgmiss.bmp", gimggrdmiss
load image "compshell.bmp", gimggrdshell
load image "compbullet.bmp", gimggrdbullet
load image "compbeam.bmp", gimggunbeam
load image "compsbeam.bmp", gimggunsbeam
load image "explosion.bmp", gimgexplosion1
`load image gimgexplosion2
`load image gimgexplosion3
`load image gimgexplosion4

`Load all game sounds

`Create the sprites that will be used

`Initialize the game
Initialize()
`Load the graphics
  loadgraphics()
set current bitmap 0
`###############################################################################################################################################


`MAIN GAME LOOP#################################################################################################################################
do
  updatesprites()

  sync          `Update the display
loop
`###############################################################################################################################################


`VARIABLE INITIALIZATION########################################################################################################################
Function Initialize()
  randomize timer()              `Ensure that we have unique random numbers each time we run

  set image colorkey 0,0,255
  color backdrop 0

  `Sprite Numbers
  `001-001: Background
  `002-002: Ground
  `003-009: unused static items
  `010-024: City(15)
  `025-025: Computer energy counter
  `026-026: Computer gun builder
  `027-028: Computer gun counter(2)
  `029-029: Computer gun
  `030-033: Computer ground trooper(4)
  `034-035: Computer tank(2)
  `036-037: Computer missile tank(2)
  `038-042: Computer repair crews(5)
  `043-044: Computer passenger plane(2)
  `045-046: Computer fighter plane(2)
  `047-047: Computer bomber
  `048-052: Computer shield(5)
  `053-092: Player aliens
  `093-093: Player mothership
  `094-094: Player Energy counter
  `095-103: Player paratroopers
  `103-126: Player beams
  `127-134: Player missiles
  `135-135: Player bomb
  `121-140: Computer troop bullets
  `140-149: Computer tank shells
  `150-159: Computer missile tank missiles
  `160-164: Computer fighter missiles
  `165-169: Computer bomber bombs
  `170-179: Computer beams
  `180-180: Computer superbeam
  `181-998: Explosions and whatever else
  `999: Overlay

  `Set the background and ground
  `sprite 1, 0, 0, gimgbackground



  `Set the player sprites
  dim player(40) as generalmovingsprite
  for x = 1 to 40
    player(x).spritenum = 52 + x
    player(x).imagenum = gimgalien
    player(x).x = 50 + (75 * (x - 1)) - (600 * (x - 1) / 8)
    player(x).y = 350 - (75 * ((x - 1) / 8))
    player(x).velocity = 5
    sprite player(x).spritenum, player(x).x, player(x).y, player(x).imagenum
    scale sprite player(x).spritenum, 75
  next x

  `Set the shields
  dim shields(5) as staticsprite
  for x = 0 to 4
    shields(x).spritenum = 48 + x
    shields(x).imagenum = gimgshield
    shields(x).x = 50
    shields(x).y = 400 + (10 * x)
    sprite shields(x).spritenum, shields(x).x, shields(x).y, shields(x).imagenum
  next x

  `Set the city
  dim city(15) as staticsprite
  create animated sprite 10, "city.bmp", 15, 1, gimgcity
  set sprite frame 10, 1
  for x = 1 to 15
    `city(x).spritenum = 9 + x
    dx = 36 + (36 * (x - 1))

    `sprite 10
    `set sprite frame (9 + x), x

    `city(x).imagenum = set sprite frame (9 + x), x
    `city(x).x = 50 + (5 * x)
    `city(x).y = 475
    `sprite (9 + x), city(x).x, city(x).y, gimgcity
  next x

  `Set the computer gun
  global gcompgun as generalmovingsprite
    gcompgun.spritenum = 2
    gcompgun.imagenum = gimggun
    gcompgun.x = 400
    gcompgun.y = 500
    gcompgun.velocity = 5
    sprite gcompgun.spritenum, gcompgun.x, gcompgun.y, gcompgun.imagenum
    scale sprite gcompgun.spritenum, 75


endfunction
`###############################################################################################################################################


`FUNCTIONS######################################################################################################################################
Function GetVideoCardInformation()
  `Check for any installed video cards and list them
  perform checklist for graphics cards
  VideoCards = checklist quantity()
  if VideoCards > 1
    print "There are ", VideoCards, " installed video cards."
    for x = 1 to VideoCards
      print " ", x, " - ", checklist string$(x)
    next x
  else
    print "There is one installed video card."
  endif

  `Display the current video driver
  print "Video driver: ", current graphics card$()

  `Check for transform and lighting options
  if tnl available() = 1
    print "Transform and lighting supported."
  else
    print "Trasforn and lightning not supported."
  endif

  'Display the availavle memory
  print "Total video memory: ", system dmem available()
  print "System memory free: ", system smem available()
  print "Total memory free: ", system tmem available()

  wait key

  `Cleanup
  empty checklist
endfunction
Function GetVideoResolutions()


  `Get the list of resolutions available
  perform checklist for display modes

  Modes = checklist quantity()
  for x = 1 to Modes/2
    set cursor 0,x*16
    print x; " ";checklist string$(x);

    set cursor 200,x*16
    print Modes/2+x; " "; checklist string$(Modes/2+x)
  next x
endfunction
Function CheckForWin()
  `Check to see if there is a winner yet
  `if gPlayerVictory then
  `endif
  `if gComperVictory then
  `endif
endfunction
Function Cleanup()
  `Delete the bitmaps

  `Delete the sounds

endfunction
`###############################################################################################################################################






`define all sprite #'s
`global IMG_BG as integer = 1
`global SPR_SHIP as integer = 2
`global SPR_UFO as integer = 3
`global SPR_EXPLOSION as integer = 4
`global IMG_BULLET as integer = 20
`global SPR_BULLET as integer = 200

`bullet constants
`global FIRINGRATE as integer = 4 `per second
`global BULLETSPEED as float = 5.0

`define a custom sprite datatype
`type mySPRITE
`    alive as byte
`    x as float
`    y as float
`    velx as float
`    vely as float
`    faceangle as integer
`    moveangle as integer
`    velocity as float
`    animframe as integer
`    animcount as integer
`    animdelay as integer
`    imagenum as integer
`    spritenum as integer
`endtype

  `define the sprites
  `global player as mySPRITE
  `global NUMBULLETS as integer = 10
  `dim bullets(10) as mySPRITE
  `global ufo as mySPRITE
  `global expl as mySPRITE

`framerate variables
`global fps as integer
`global ticks as integer
`global start as integer = timer()

`use manual timing for bullets
`global firestart as integer = timer()

`load the game graphics
`loadGraphics()

`make sure all drawing now goes to the screen
`set current bitmap 0

`do
    `draw the background
`    paste image IMG_BG, 0, 0

    `move the player's ship
`    checkInput()
    `update all sprites
`    updateSprites()
    `test for collisions
`    testCollisions()
    `display status info
`    printInfo()
    `calculate frame rate
`    ticks = ticks + 1
`    if timer() > start + 999
`        fps = ticks
`        ticks = 0
`        start = timer()
`    endif
`    sync
`loop


function loadGraphics()
    `set transparent color to pink
`    set image colorkey 255, 0, 255

  `init the player
`    player.x = 400.0
`    player.y = 300.0
`    player.imagenum = SPR_SHIP
`    player.spritenum = SPR_SHIP
`    sprite player.spritenum, player.x, player.y, player.imagenum
`    xo = sprite width(player.spritenum)/2
`    yo = sprite height(player.spritenum)/2
`    offset sprite player.spritenum, xo, yo

    `init the bullets
`    for n = 0 to NUMBULLETS-1
`        bullets(n).imagenum = IMG_BULLET
`        bullets(n).spritenum = SPR_BULLET + n
`        bullets(n).alive = 0
`        sprite bullets(n).spritenum, 999, 999, bullets(n).imagenum
`        xo = sprite width(bullets(n).spritenum)/2
`        yo = sprite height(bullets(n).spritenum)/2
`        offset sprite bullets(n).spritenum, xo, yo
`    next n

    `init the ufo
`    ufo.x = rnd(screen width())
`    ufo.y = rnd(screen height())
`    ufo.moveangle = rnd(359)
`    ufo.faceangle = ufo.moveangle
`    ufo.velx = calcVelocityX(ufo.moveangle)
`    ufo.vely = calcVelocityY(ufo.moveangle)
`    ufo.imagenum = SPR_UFO
`    ufo.spritenum = SPR_UFO
`    sprite ufo.spritenum, ufo.x, ufo.y, ufo.imagenum
`    xo = sprite width(ufo.spritenum)/2
`    yo = sprite height(ufo.spritenum)/2
`    offset sprite ufo.spritenum, xo, yo
`    rotate sprite ufo.imagenum, ufo.faceangle

    `init the explosion
`    spr = SPR_EXPLOSION
`    create animated sprite spr, "explosion.png", 4, 4, spr
`    expl.alive = 0
`    expl.x = 999
`    expl.y = 999
`    expl.imagenum = SPR_EXPLOSION
`    expl.spritenum = SPR_EXPLOSION
`    sprite expl.spritenum, expl.x, expl.y, expl.imagenum
`    xo = sprite width(expl.spritenum)/2
`    yo = sprite height(expl.spritenum)/2
`    offset sprite expl.spritenum, xo, yo
endfunction

function updateSprites()
  `Update computer's position
  gcompgun.x = gcompgun.x + gcompgun.velocity
  if (gcompgun.x > 750 or gcompgun.x < 50) then gcompgun.velocity = gcompgun.velocity * -1
  sprite gcompgun.spritenum, gcompgun.x, gcompgun.y, gcompgun.imagenum


  `Update the players positions
  changevel = 0
  if (player(8).x > 750 or player(1).x < 50) then changevel = 1
  for x = 1 to 40
    if changevel then player(x).velocity = player(x).velocity * -1
    player(x).x = player(x).x + player(x).velocity
    if changevel then player(x).y = player(x).y + 2
    sprite player(x).spritenum, player(x).x, player(x).y, player(x).imagenum
    scale sprite player(x).spritenum, 75
  next x
`    player.X = player.X + player.velX
`    if player.X < 0 then player.X = screen width()
`    if player.X > screen width() then player.X = 0

    `update player's y pos
`    player.Y = player.Y + player.velY
`    if player.Y < 0 then player.Y = screen height()
`    if player.Y > screen height() then player.Y = 0

    `move the ufo
`    ufo.X = ufo.X + ufo.velX
`    if ufo.X < 0 then ufo.X = screen width()
`    if ufo.X > screen width() then ufo.X = 0

    `update ufo
`    ufo.X = ufo.X + ufo.velX
`    if ufo.X < 0 then ufo.X = screen width()
`    if ufo.X > screen width() then ufo.X = 0
`    ufo.Y = ufo.Y + ufo.velY
`    if ufo.Y < 0 then ufo.Y = screen height()
`    if ufo.Y > screen height() then ufo.Y = 0
`    sprite ufo.spritenum, ufo.x, ufo.y, ufo.imagenum

    `update explosion
`    if expl.alive = 1
`        if sprite frame(expl.spritenum) = 16
`            expl.alive = 0
`        else
`            paste sprite expl.spritenum, expl.x, expl.y
`            play sprite expl.spritenum, 1, 16, 30
`        endif
`    endif

    `draw the player's ship
`    spr = player.imagenum
`    sprite spr, int(player.X), int(player.Y), spr

`    for n = 0 to NUMBULLETS-1
`        if bullets(n).alive = 1
            `update sprite's x pos
`            bullets(n).x = bullets(n).x + bullets(n).velx * BULLETSPEED
`            if bullets(n).x < 0 or bullets(n).x > screen width()
`                bullets(n).alive = 0
`                hide sprite bullets(n).spritenum
`            endif

            `update sprite's y pos
`            bullets(n).y = bullets(n).y + bullets(n).vely * BULLETSPEED
`            if bullets(n).y < 0 or bullets(n).y > screen height()
`                bullets(n).alive = 0
`                hide sprite bullets(n).spritenum
`            endif

            `draw the sprite
`            spr = bullets(n).spritenum
`            img = bullets(n).imagenum
`            sprite spr, int(bullets(n).x), int(bullets(n).y), img
`        endif
`    next n
endfunction


`function checkInput()
`    vel as float

`    if upkey()
        `apply some thrust using calculated velocity
`        player.moveangle = wrapvalue(player.faceangle)
        `calculate X velocity
`        vel = calcVelocityX(player.moveangle) * ACCELERATION
`        player.velx = player.velx + vel
        `limit the throttle
`        if player.velx < -TOPSPEED then player.velx = -TOPSPEED
`        if player.velx > TOPSPEED then player.velx = TOPSPEED
        `calculate Y velocity
`        vel = calcVelocityY(player.moveangle) * ACCELERATION
`        player.vely = player.vely + vel
        `limit the throttle
`        if player.vely < -TOPSPEED then player.vely = -TOPSPEED
`        if player.vely > TOPSPEED then player.vely = TOPSPEED
`    endif

`    if leftkey()
        `turn ship left
`        player.faceangle = wrapvalue(player.faceangle - ROTATIONRATE)
`        rotate sprite player.imagenum, player.faceangle
`    endif

`    if rightkey()
        `turn ship right
`        player.faceangle = wrapvalue(player.faceangle + ROTATIONRATE)
`        rotate sprite player.imagenum, player.faceangle
`    endif

    `fire a bullet
`    if spacekey()
`        fireBullet()
`    endif
`endfunction

`function calcVelocityX(angle as float)
    `calculate X velocity based on direction angle
`    value# = sin(angle)
`endfunction (value#)

`function calcVelocityY(angle#)
    `calculate Y velocity based on direction angle
`    value# = -cos(angle#)
`endfunction value#

`function fireBullet()
`    done as integer = 0

    `slow down the firing rate
`    if timer() > firestart + 1000 / FIRINGRATE

`        for n = 0 to NUMBULLETS-1
            `break out of loop when we find an unused bullet
`            if done = 0 and bullets(n).alive = 0
`                bullets(n).alive = 1
`                bullets(n).x = player.x
`                bullets(n).y = player.y
`                bullets(n).faceangle = player.faceangle
`                bullets(n).moveangle = player.faceangle
`                bullets(n).velx = calcVelocityX(bullets(n).moveangle)
`                bullets(n).vely = calcVelocityY(bullets(n).moveangle)
                `draw the bullet sprite at the correct angle
`                rotate sprite bullets(n).spritenum, bullets(n).faceangle
                `move the bullet sprite
`                spr = bullets(n).spritenum
`                img = bullets(n).imagenum
`                sprite spr, bullets(n).x, bullets(n).y, img
`                show sprite bullets(n).spritenum
`                done = 1
`            endif
`        next n
        `pause before allowing another shot to be fired
`        firestart = timer()
`    endif
`endfunction

`function testCollisions()
    `look at all the bullets for a collision
`    for n = 0 to NUMBULLETS-1
`        if bullets(n).alive = 1
            `collision test: bullet and ufo
`            if sprite collision(bullets(n).spritenum, ufo.spritenum)
                `erase the bullet
`                bullets(n).alive = 0
`                hide sprite bullets(n).spritenum
                `start the explosion
`                expl.x = ufo.x
`                expl.y = ufo.y
`                expl.alive = 1
`                set sprite frame expl.spritenum, 1
                `restart the ufo somewhere else
`                ufo.x = rnd(screen width())
`                ufo.y = rnd(screen height())
`                ufo.moveangle = rnd(359)
`                ufo.faceangle = ufo.moveangle
`                ufo.velx = calcVelocityX(ufo.moveangle)
`                ufo.vely = calcVelocityY(ufo.moveangle)
`                rotate sprite ufo.imagenum, ufo.faceangle
`                exit
`            endif
`        endif
`    next n
`endfunction

`function printInfo()
    `set up a nice font
`    set text font "Arial"
`    set text to bold
`    set text size 18
`    ink rgb(255,255,0),0
    `display ship's velocity
`    vx$ = left$(str$(player.velX),5)
`    vy$ = left$(str$(player.velY),5)
`    text 0,0,"Vel: " + vx$ + ", " + vy$
    `display ship's position
`    text 140,0,"Pos: "+str$(int(player.X))+", "+str$(int(player.Y))
    `display angles
`    text 300,0,"Face: " + str$(player.faceangle)
`    text 400,0,"Move: " + str$(player.moveangle)
`    text screen width()-80,0,"FPS " + str$(fps)
`endfunction

